using System.Collections;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;


namespace SplineMesh
{
    /// <summary>
    /// Example of component to show that the spline is an independant mathematical component and can be used for other purposes than mesh deformation.
    /// 
    /// This component is only for demo purpose and is not intended to be used as-is.
    /// 
    /// We only move an object along the spline. Imagine a camera route, a ship patrol...
    /// </summary>
    [ExecuteInEditMode]
    [RequireComponent(typeof(Spline))]
    public class ExampleFollowSpline : MonoBehaviour
    {
        private GameObject generated;
        private Spline spline;
        private float rate = 0;
        private float y = 1;

        public GameObject Follower;
        public Transform TrainTransform;
        //public Vector3 DefaultRotation;
        //public Quarternion FlippedRotation;

        public float DurationInSecond;

        private void OnEnable()
        {
            rate = 0;
            string generatedName = "generated by " + GetType().Name;
            var generatedTranform = transform.Find(generatedName);
            generated = generatedTranform != null ? generatedTranform.gameObject : Instantiate(Follower, gameObject.transform);
            generated.name = generatedName;

            spline = GetComponent<Spline>();
#if UNITY_EDITOR
            EditorApplication.update += EditorUpdate;
#endif
        }

        void OnDisable()
        {
#if UNITY_EDITOR
            EditorApplication.update -= EditorUpdate;
#endif
        }

        void Start()
        {
            //DefaultRotation = TrainTransform.rotation;
            //FlippedRotation = new Quarternion(TrainTransform.rotation.x,TrainTransform.rotation.y,TrainTransform.z + 180);
        }

        void EditorUpdate()
        {
            if (Input.GetKey("a"))
            {
                if (DurationInSecond > 2)
                {
                    DurationInSecond = (DurationInSecond)*(1-(y/100));
                }

            }
            if (Input.GetKey("d")) 
            {
                if (DurationInSecond < 150)
                {
                    DurationInSecond = (DurationInSecond) * (1 + (y / 100));
                }
            }
            if (DurationInSecond < 150)
            {
                rate += Time.deltaTime / DurationInSecond;
                if (rate > spline.nodes.Count - 1)
                {
                    rate -= spline.nodes.Count - 1;
                }
                PlaceFollower();
            }

        }

        private void PlaceFollower()
        {
            if (generated != null)
            {
                CurveSample sample = spline.GetSample(rate);
                generated.transform.localPosition = sample.location;
                generated.transform.localRotation = sample.Rotation;
            }
        }
    }
}